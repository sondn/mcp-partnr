/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ITestProtocolFactory,
  ITestProtocolFactoryInterface,
} from "../../../../contracts/utils/TestProtocolFactory.sol/ITestProtocolFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ITestProtocolFactory__factory {
  static readonly abi = _abi;
  static createInterface(): ITestProtocolFactoryInterface {
    return new Interface(_abi) as ITestProtocolFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ITestProtocolFactory {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ITestProtocolFactory;
  }
}
