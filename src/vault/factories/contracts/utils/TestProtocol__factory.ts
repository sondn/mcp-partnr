/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestProtocol,
  TestProtocolInterface,
} from "../../../contracts/utils/TestProtocol";

const _abi = [
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "addPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEVMVault",
        name: "vault",
        type: "address",
      },
    ],
    name: "getVaultValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEVMVault",
        name: "vault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "onDeposit",
    outputs: [
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEVMVault",
        name: "vault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "onWithdraw",
    outputs: [
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "removePool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tokenToPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e4f806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063989796b511610066578063989796b51461014f578063c4d66de814610178578063ccad973d1461018b578063eb511dd41461019e578063f2fde38b146101b157600080fd5b80632bf9518c146100a35780633b7d0946146100cd578063715018a6146100e25780638da5cb5b146100ea5780639566433a1461012e575b600080fd5b6100b66100b1366004610c35565b6101c4565b6040516100c4929190610c61565b60405180910390f35b6100e06100db366004610d31565b61067a565b005b6100e06106a9565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03165b6040516001600160a01b0390911681526020016100c4565b61014161013c366004610d31565b6106bd565b6040519081526020016100c4565b61011661015d366004610d31565b6000602081905290815260409020546001600160a01b031681565b6100e0610186366004610d31565b6107b8565b6100b6610199366004610c35565b6108c8565b6100e06101ac366004610d4e565b610a7e565b6100e06101bf366004610d31565b610ab4565b6060806000846001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022b9190610d87565b6001600160a01b038082166000908152602081905260409020549192501661028f5760405162461bcd60e51b8152602060048201526012602482015271496e76616c696420756e6465726c79696e6760701b60448201526064015b60405180910390fd5b6040516370a0823160e01b81526001600160a01b038681166004830152600091908316906370a0823190602401602060405180830381865afa1580156102d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fd9190610da4565b9050848110156103465760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610286565b6001600160a01b03828116600081815260208190526040808220549051636eb1769f60e11b81528a85166004820152931660248401529163dd62ed3e90604401602060405180830381865afa1580156103a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c79190610da4565b9050858110156105875760408051600280825260608201835290916020830190803683370190505060408051600280825260608201909252919650816020015b6060815260200190600190039081610407579050509350828560008151811061043257610432610dbd565b6001600160a01b03928316602091820292909201810191909152848216600090815290819052604090205463095ea7b360e01b91166104718389610de9565b6040516001600160a01b0390921660248301526044820152606401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050846000815181106104d2576104d2610dbd565b6020908102919091018101919091526001600160a01b0380851660009081529182905260409091205486519116908690600190811061051357610513610dbd565b6001600160a01b03929092166020928302919091018201526040805160248082018a905282518083039091018152604490910190915290810180516001600160e01b031663140e25ad60e31b17905284518590600190811061057757610577610dbd565b6020026020010181905250610670565b604080516001808252818301909252906020808301908036833701905050604080516001808252818301909252919650816020015b60608152602001906001900390816105bc5750506001600160a01b0384811660009081526020819052604081205488519397509091169187919061060257610602610dbd565b6001600160a01b03929092166020928302919091018201526040805160248082018a905282518083039091018152604490910190915290810180516001600160e01b031663140e25ad60e31b1790528451859060009061066457610664610dbd565b60200260200101819052505b5050509250929050565b610682610af2565b6001600160a01b0316600090815260208190526040902080546001600160a01b0319169055565b6106b1610af2565b6106bb6000610b4d565b565b600080600080846001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107259190610d87565b6001600160a01b039081168252602082019290925260409081016000205490516370a0823160e01b815285831660048201529116906370a0823190602401602060405180830381865afa158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a49190610da4565b90506107b1816002610e02565b9392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156107fe5750825b905060008267ffffffffffffffff16600114801561081b5750303b155b905081158015610829575080155b156108475760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561087157845460ff60401b1916600160401b1785555b61087a86610bbe565b83156108c057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6060806000846001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f9190610d87565b6001600160a01b038082166000908152602081905260409020549192501661098e5760405162461bcd60e51b8152602060048201526012602482015271496e76616c696420756e6465726c79696e6760701b6044820152606401610286565b604080516001808252818301909252906020808301908036833701905050604080516001808252818301909252919450816020015b60608152602001906001900390816109c35750506001600160a01b03828116600090815260208190526040812054865193955090911691859190610a0957610a09610dbd565b6001600160a01b039290921660209283029190910182015260408051602480820188905282518083039091018152604490910190915290810180516001600160e01b0316630852cd8d60e31b17905282518390600090610a6b57610a6b610dbd565b6020026020010181905250509250929050565b610a86610af2565b6001600160a01b03918216600090815260208190526040902080546001600160a01b03191691909216179055565b610abc610af2565b6001600160a01b038116610ae657604051631e4fbdf760e01b815260006004820152602401610286565b610aef81610b4d565b50565b33610b247f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146106bb5760405163118cdaa760e01b8152336004820152602401610286565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b610bc6610bcf565b610aef81610c18565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166106bb57604051631afcd79f60e31b815260040160405180910390fd5b610abc610bcf565b6001600160a01b0381168114610aef57600080fd5b60008060408385031215610c4857600080fd5b8235610c5381610c20565b946020939093013593505050565b604080825283519082018190526000906020906060840190828701845b82811015610ca35781516001600160a01b031684529284019290840190600101610c7e565b50505083810382850152845180825282820190600581901b8301840187850160005b83811015610d2257601f19808785030186528251805180865260005b81811015610cfc578281018b01518782018c01528a01610ce1565b5060008682018b015296890196601f019091169093018701925090860190600101610cc5565b50909998505050505050505050565b600060208284031215610d4357600080fd5b81356107b181610c20565b60008060408385031215610d6157600080fd5b8235610d6c81610c20565b91506020830135610d7c81610c20565b809150509250929050565b600060208284031215610d9957600080fd5b81516107b181610c20565b600060208284031215610db657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610dfc57610dfc610dd3565b92915050565b8082028115828204841417610dfc57610dfc610dd356fea2646970667358221220f7dd635cdafa01b3e0903c3470b2971c6d3deea8a4131084773dcffc609db5e464736f6c63430008140033";

type TestProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestProtocol__factory extends ContractFactory {
  constructor(...args: TestProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestProtocol & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestProtocol__factory {
    return super.connect(runner) as TestProtocol__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestProtocolInterface {
    return new Interface(_abi) as TestProtocolInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestProtocol {
    return new Contract(address, _abi, runner) as unknown as TestProtocol;
  }
}
