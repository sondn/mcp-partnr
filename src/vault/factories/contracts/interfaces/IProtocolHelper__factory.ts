/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IProtocolHelper,
  IProtocolHelperInterface,
} from "../../../contracts/interfaces/IProtocolHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEVMVault",
        name: "vault",
        type: "address",
      },
    ],
    name: "getVaultValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEVMVault",
        name: "vault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "onDeposit",
    outputs: [
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEVMVault",
        name: "vault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "onWithdraw",
    outputs: [
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IProtocolHelper__factory {
  static readonly abi = _abi;
  static createInterface(): IProtocolHelperInterface {
    return new Interface(_abi) as IProtocolHelperInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IProtocolHelper {
    return new Contract(address, _abi, runner) as unknown as IProtocolHelper;
  }
}
