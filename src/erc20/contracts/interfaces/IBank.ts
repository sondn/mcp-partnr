/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IBank {
  export type DepositERC20RequestStruct = {
    erc20: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    reason: PromiseOrValue<string>;
    nonce: PromiseOrValue<BigNumberish>;
    expiry: PromiseOrValue<BigNumberish>;
  };

  export type DepositERC20RequestStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    erc20: string;
    amount: BigNumber;
    reason: string;
    nonce: BigNumber;
    expiry: BigNumber;
  };

  export type DepositERC721RequestStruct = {
    erc721: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    reason: PromiseOrValue<string>;
    nonce: PromiseOrValue<BigNumberish>;
    expiry: PromiseOrValue<BigNumberish>;
  };

  export type DepositERC721RequestStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    erc721: string;
    tokenId: BigNumber;
    reason: string;
    nonce: BigNumber;
    expiry: BigNumber;
  };

  export type WithdrawERC20RequestStruct = {
    receiver: PromiseOrValue<string>;
    erc20: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    txid: PromiseOrValue<string>;
    expiry: PromiseOrValue<BigNumberish>;
    app: PromiseOrValue<string>;
  };

  export type WithdrawERC20RequestStructOutput = [
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    receiver: string;
    erc20: string;
    amount: BigNumber;
    txid: string;
    expiry: BigNumber;
    app: string;
  };

  export type WithdrawERC721RequestStruct = {
    receiver: PromiseOrValue<string>;
    erc721: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    mint: PromiseOrValue<boolean>;
    txid: PromiseOrValue<string>;
    expiry: PromiseOrValue<BigNumberish>;
    app: PromiseOrValue<string>;
  };

  export type WithdrawERC721RequestStructOutput = [
    string,
    string,
    BigNumber,
    boolean,
    string,
    BigNumber,
    string
  ] & {
    receiver: string;
    erc721: string;
    tokenId: BigNumber;
    mint: boolean;
    txid: string;
    expiry: BigNumber;
    app: string;
  };
}

export interface IBankInterface extends utils.Interface {
  functions: {
    "depositERC20(address,uint256,address,address,string)": FunctionFragment;
    "depositERC20BySig((address,uint256,string,uint256,uint256),address,uint8,bytes32,bytes32)": FunctionFragment;
    "depositERC721(address,uint256,address,address,string)": FunctionFragment;
    "depositERC721BySig((address,uint256,string,uint256,uint256),address,uint8,bytes32,bytes32)": FunctionFragment;
    "depositMoreERC20(address,uint256,address,address,string)": FunctionFragment;
    "depositMoreERC721(address,uint256,address,address,string)": FunctionFragment;
    "withdrawERC20((address,address,uint256,string,uint256,address),uint8,bytes32,bytes32)": FunctionFragment;
    "withdrawERC721((address,address,uint256,bool,string,uint256,address),uint8,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositERC20"
      | "depositERC20BySig"
      | "depositERC721"
      | "depositERC721BySig"
      | "depositMoreERC20"
      | "depositMoreERC721"
      | "withdrawERC20"
      | "withdrawERC721"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20BySig",
    values: [
      IBank.DepositERC20RequestStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721BySig",
    values: [
      IBank.DepositERC721RequestStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositMoreERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositMoreERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [
      IBank.WithdrawERC20RequestStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [
      IBank.WithdrawERC721RequestStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20BySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721BySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMoreERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMoreERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;

  events: {
    "Deposited(uint256,address,uint256,address,string,address)": EventFragment;
    "Withdrawn(address,uint256,address,string,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface DepositedEventObject {
  depositId: BigNumber;
  token: string;
  tokenIdOrAmount: BigNumber;
  owner: string;
  reason: string;
  app: string;
}
export type DepositedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, string],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface WithdrawnEventObject {
  token: string;
  tokenIdOrAmount: BigNumber;
  receiver: string;
  txid: string;
  app: string;
  minted: boolean;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, string, string, string, boolean],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface IBank extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBankInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositERC20(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC20BySig(
      request: IBank.DepositERC20RequestStruct,
      app: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC721(
      erc721: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC721BySig(
      request: IBank.DepositERC721RequestStruct,
      app: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositMoreERC20(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositMoreERC721(
      erc721: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      request: IBank.WithdrawERC20RequestStruct,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      request: IBank.WithdrawERC721RequestStruct,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  depositERC20(
    erc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    depositer: PromiseOrValue<string>,
    app: PromiseOrValue<string>,
    reason: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC20BySig(
    request: IBank.DepositERC20RequestStruct,
    app: PromiseOrValue<string>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC721(
    erc721: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    depositer: PromiseOrValue<string>,
    app: PromiseOrValue<string>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC721BySig(
    request: IBank.DepositERC721RequestStruct,
    app: PromiseOrValue<string>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositMoreERC20(
    erc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    depositer: PromiseOrValue<string>,
    app: PromiseOrValue<string>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositMoreERC721(
    erc721: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    depositer: PromiseOrValue<string>,
    app: PromiseOrValue<string>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    request: IBank.WithdrawERC20RequestStruct,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    request: IBank.WithdrawERC721RequestStruct,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositERC20(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositERC20BySig(
      request: IBank.DepositERC20RequestStruct,
      app: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositERC721(
      erc721: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositERC721BySig(
      request: IBank.DepositERC721RequestStruct,
      app: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositMoreERC20(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositMoreERC721(
      erc721: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawERC20(
      request: IBank.WithdrawERC20RequestStruct,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawERC721(
      request: IBank.WithdrawERC721RequestStruct,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Deposited(uint256,address,uint256,address,string,address)"(
      depositId?: null,
      token?: null,
      tokenIdOrAmount?: null,
      owner?: null,
      reason?: null,
      app?: null
    ): DepositedEventFilter;
    Deposited(
      depositId?: null,
      token?: null,
      tokenIdOrAmount?: null,
      owner?: null,
      reason?: null,
      app?: null
    ): DepositedEventFilter;

    "Withdrawn(address,uint256,address,string,address,bool)"(
      token?: null,
      tokenIdOrAmount?: null,
      receiver?: null,
      txid?: null,
      app?: null,
      minted?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      token?: null,
      tokenIdOrAmount?: null,
      receiver?: null,
      txid?: null,
      app?: null,
      minted?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    depositERC20(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC20BySig(
      request: IBank.DepositERC20RequestStruct,
      app: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC721(
      erc721: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC721BySig(
      request: IBank.DepositERC721RequestStruct,
      app: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositMoreERC20(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositMoreERC721(
      erc721: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      request: IBank.WithdrawERC20RequestStruct,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      request: IBank.WithdrawERC721RequestStruct,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositERC20(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC20BySig(
      request: IBank.DepositERC20RequestStruct,
      app: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC721(
      erc721: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC721BySig(
      request: IBank.DepositERC721RequestStruct,
      app: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositMoreERC20(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositMoreERC721(
      erc721: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositer: PromiseOrValue<string>,
      app: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      request: IBank.WithdrawERC20RequestStruct,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      request: IBank.WithdrawERC721RequestStruct,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
